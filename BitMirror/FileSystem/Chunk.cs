using System;
using System.IO;

namespace BitMirror
{
	/// <summary>
	/// A chunk contains a portion of the data contained within a file. The data
	/// is hashed to provide change tracking.
	/// </summary>
	public class Chunk
	{
		/// <summary>
		/// Parent File
		/// </summary>
		private File mFile;

		/// <summary>
		/// Offset, in bytes, into the file where this chunk begins
		/// </summary>
		private int mOffset;

		/// <summary>
		/// Length, in bytes, of this chunk
		/// </summary>
		private int mLength;

		/// <summary>
		/// Chunk Signature
		/// </summary>
		private byte[] mSignature;

		/// <summary>
		/// Chunk Signature. Generated by GenerateSignature
		/// </summary>
		/// <value>Chunk Signature</value>
		public byte[] Signature 
		{
			get { return mSignature; }
		}

		/// <summary>
		/// Hashing Object
		/// </summary>
		private Murmur3 mHasher = new Murmur3();

		/// <summary>
		/// Construct a chunk as a child of the given parent file
		/// </summary>
		/// <param name="file">Parent File</param>
		public Chunk( File file, int offset, int length )
		{
			mFile 	= file;
			mOffset = offset;
			mLength	= length;
		}

		/// <summary>
		/// Generate the signature for this chunk from the given file stream
		/// </summary>
		/// <param name="stream">File Stream</param>
		public void GenerateSignature( FileStream stream )
		{
			byte[] data = new byte[mLength];
			stream.Read( data, mOffset, mLength );
			mSignature = mHasher.ComputeHash( data );
		}

		/// <summary>
		/// Check whether this chunk is equal to the given chunk, based on its offset, length and signature.
		/// </summary>
		/// <param name="other">The <see cref="BitMirror.Chunk"/> to compare with the current <see cref="BitMirror.Chunk"/>.</param>
		/// <returns><c>true</c> if the specified <see cref="BitMirror.Chunk"/> is equal to the current <see cref="BitMirror.Chunk"/>;
		/// otherwise, <c>false</c>.</returns>
		public override bool Equals( Chunk other )
		{
			if( other == null )
			{
				return false;
			};
				
			return other.mLength == mLength && other.mOffset == mOffset && other.mSignature.Equals( mSignature );
		}
	}
}

